"use strict";
// This file is auto-generated by @hey-api/openapi-ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.userroleNestedLink = exports.userroleNestedList = exports.userroleNestedUnlink = exports.userroleCount = exports.userroleRead = exports.userroleCreate = exports.userroleUpdate = exports.userroleDbTableRowList = exports.userroleDelete = exports.accountNestedLink = exports.accountNestedList = exports.accountNestedUnlink = exports.accountCount = exports.accountRead = exports.accountCreate = exports.accountUpdate = exports.accountDbTableRowList = exports.accountDelete = exports.useravatarNestedLink = exports.useravatarNestedList = exports.useravatarNestedUnlink = exports.useravatarCount = exports.useravatarRead = exports.useravatarCreate = exports.useravatarUpdate = exports.useravatarDbTableRowList = exports.useravatarDelete = exports.userNestedLink = exports.userNestedList = exports.userNestedUnlink = exports.userCount = exports.userRead = exports.userCreate = exports.userUpdate = exports.userDbTableRowList = exports.userDelete = void 0;
const client_gen_1 = require("./client.gen");
/**
 * User delete
 * Delete a row by using the **primary key** column value.
 */
const userDelete = (options) => {
    var _a;
    return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client_gen_1.client).delete(Object.assign(Object.assign({ security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ], url: '/api/v2/tables/mq90d8odwj9en4c/records' }, options), { headers: Object.assign({ 'Content-Type': 'application/json' }, options === null || options === void 0 ? void 0 : options.headers) }));
};
exports.userDelete = userDelete;
/**
 * User list
 * List of all rows from User table and response data fields can be filtered based on query params.
 */
const userDbTableRowList = (options) => {
    var _a;
    return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client_gen_1.client).get(Object.assign({ security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ], url: '/api/v2/tables/mq90d8odwj9en4c/records' }, options));
};
exports.userDbTableRowList = userDbTableRowList;
/**
 * User update
 * Partial update row in table by providing a key value pair object where key refers to the column alias. You need to only include columns which you want to update.
 */
const userUpdate = (options) => {
    var _a;
    return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client_gen_1.client).patch(Object.assign(Object.assign({ security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ], url: '/api/v2/tables/mq90d8odwj9en4c/records' }, options), { headers: Object.assign({ 'Content-Type': 'application/json' }, options === null || options === void 0 ? void 0 : options.headers) }));
};
exports.userUpdate = userUpdate;
/**
 * User create
 * Insert a new row in table by providing a key value pair object where key refers to the column alias. All the required fields should be included with payload excluding `autoincrement` and column with default value.
 */
const userCreate = (options) => {
    var _a;
    return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client_gen_1.client).post(Object.assign(Object.assign({ security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ], url: '/api/v2/tables/mq90d8odwj9en4c/records' }, options), { headers: Object.assign({ 'Content-Type': 'application/json' }, options === null || options === void 0 ? void 0 : options.headers) }));
};
exports.userCreate = userCreate;
/**
 * User read
 * Read a row data by using the **primary key** column value.
 */
const userRead = (options) => {
    var _a;
    return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client_gen_1.client).get(Object.assign({ security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ], url: '/api/v2/tables/mq90d8odwj9en4c/records/{recordId}' }, options));
};
exports.userRead = userRead;
/**
 * User count
 * Get rows count of a table by applying optional filters.
 */
const userCount = (options) => {
    var _a;
    return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client_gen_1.client).get(Object.assign({ security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ], url: '/api/v2/tables/mq90d8odwj9en4c/records/count' }, options));
};
exports.userCount = userCount;
/**
 * Unlink Records
 * This API endpoint allows you to unlink records from a specific `Link field` and `Record ID`. The request payload is an array of record-ids from the adjacent table for unlinking purposes. Note that,
 * - duplicated record-ids will be ignored.
 * - non-existent record-ids will be ignored.
 */
const userNestedUnlink = (options) => {
    var _a;
    return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client_gen_1.client).delete(Object.assign(Object.assign({ security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ], url: '/api/v2/tables/mq90d8odwj9en4c/links/{linkFieldId}/records/{recordId}' }, options), { headers: Object.assign({ 'Content-Type': 'application/json' }, options === null || options === void 0 ? void 0 : options.headers) }));
};
exports.userNestedUnlink = userNestedUnlink;
/**
 * Link Records list
 * This API endpoint allows you to retrieve list of linked records for a specific `Link field` and `Record ID`. The response is an array of objects containing Primary Key and its corresponding display value.
 */
const userNestedList = (options) => {
    var _a;
    return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client_gen_1.client).get(Object.assign({ security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ], url: '/api/v2/tables/mq90d8odwj9en4c/links/{linkFieldId}/records/{recordId}' }, options));
};
exports.userNestedList = userNestedList;
/**
 * Link Records
 * This API endpoint allows you to link records to a specific `Link field` and `Record ID`. The request payload is an array of record-ids from the adjacent table for linking purposes. Note that any existing links, if present, will be unaffected during this operation.
 */
const userNestedLink = (options) => {
    var _a;
    return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client_gen_1.client).post(Object.assign(Object.assign({ security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ], url: '/api/v2/tables/mq90d8odwj9en4c/links/{linkFieldId}/records/{recordId}' }, options), { headers: Object.assign({ 'Content-Type': 'application/json' }, options === null || options === void 0 ? void 0 : options.headers) }));
};
exports.userNestedLink = userNestedLink;
/**
 * UserAvatar delete
 * Delete a row by using the **primary key** column value.
 */
const useravatarDelete = (options) => {
    var _a;
    return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client_gen_1.client).delete(Object.assign(Object.assign({ security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ], url: '/api/v2/tables/mk3wnta3zio319q/records' }, options), { headers: Object.assign({ 'Content-Type': 'application/json' }, options === null || options === void 0 ? void 0 : options.headers) }));
};
exports.useravatarDelete = useravatarDelete;
/**
 * UserAvatar list
 * List of all rows from UserAvatar table and response data fields can be filtered based on query params.
 */
const useravatarDbTableRowList = (options) => {
    var _a;
    return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client_gen_1.client).get(Object.assign({ security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ], url: '/api/v2/tables/mk3wnta3zio319q/records' }, options));
};
exports.useravatarDbTableRowList = useravatarDbTableRowList;
/**
 * UserAvatar update
 * Partial update row in table by providing a key value pair object where key refers to the column alias. You need to only include columns which you want to update.
 */
const useravatarUpdate = (options) => {
    var _a;
    return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client_gen_1.client).patch(Object.assign(Object.assign({ security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ], url: '/api/v2/tables/mk3wnta3zio319q/records' }, options), { headers: Object.assign({ 'Content-Type': 'application/json' }, options === null || options === void 0 ? void 0 : options.headers) }));
};
exports.useravatarUpdate = useravatarUpdate;
/**
 * UserAvatar create
 * Insert a new row in table by providing a key value pair object where key refers to the column alias. All the required fields should be included with payload excluding `autoincrement` and column with default value.
 */
const useravatarCreate = (options) => {
    var _a;
    return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client_gen_1.client).post(Object.assign(Object.assign({ security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ], url: '/api/v2/tables/mk3wnta3zio319q/records' }, options), { headers: Object.assign({ 'Content-Type': 'application/json' }, options === null || options === void 0 ? void 0 : options.headers) }));
};
exports.useravatarCreate = useravatarCreate;
/**
 * UserAvatar read
 * Read a row data by using the **primary key** column value.
 */
const useravatarRead = (options) => {
    var _a;
    return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client_gen_1.client).get(Object.assign({ security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ], url: '/api/v2/tables/mk3wnta3zio319q/records/{recordId}' }, options));
};
exports.useravatarRead = useravatarRead;
/**
 * UserAvatar count
 * Get rows count of a table by applying optional filters.
 */
const useravatarCount = (options) => {
    var _a;
    return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client_gen_1.client).get(Object.assign({ security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ], url: '/api/v2/tables/mk3wnta3zio319q/records/count' }, options));
};
exports.useravatarCount = useravatarCount;
/**
 * Unlink Records
 * This API endpoint allows you to unlink records from a specific `Link field` and `Record ID`. The request payload is an array of record-ids from the adjacent table for unlinking purposes. Note that,
 * - duplicated record-ids will be ignored.
 * - non-existent record-ids will be ignored.
 */
const useravatarNestedUnlink = (options) => {
    var _a;
    return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client_gen_1.client).delete(Object.assign(Object.assign({ security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ], url: '/api/v2/tables/mk3wnta3zio319q/links/{linkFieldId}/records/{recordId}' }, options), { headers: Object.assign({ 'Content-Type': 'application/json' }, options === null || options === void 0 ? void 0 : options.headers) }));
};
exports.useravatarNestedUnlink = useravatarNestedUnlink;
/**
 * Link Records list
 * This API endpoint allows you to retrieve list of linked records for a specific `Link field` and `Record ID`. The response is an array of objects containing Primary Key and its corresponding display value.
 */
const useravatarNestedList = (options) => {
    var _a;
    return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client_gen_1.client).get(Object.assign({ security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ], url: '/api/v2/tables/mk3wnta3zio319q/links/{linkFieldId}/records/{recordId}' }, options));
};
exports.useravatarNestedList = useravatarNestedList;
/**
 * Link Records
 * This API endpoint allows you to link records to a specific `Link field` and `Record ID`. The request payload is an array of record-ids from the adjacent table for linking purposes. Note that any existing links, if present, will be unaffected during this operation.
 */
const useravatarNestedLink = (options) => {
    var _a;
    return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client_gen_1.client).post(Object.assign(Object.assign({ security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ], url: '/api/v2/tables/mk3wnta3zio319q/links/{linkFieldId}/records/{recordId}' }, options), { headers: Object.assign({ 'Content-Type': 'application/json' }, options === null || options === void 0 ? void 0 : options.headers) }));
};
exports.useravatarNestedLink = useravatarNestedLink;
/**
 * Account delete
 * Delete a row by using the **primary key** column value.
 */
const accountDelete = (options) => {
    var _a;
    return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client_gen_1.client).delete(Object.assign(Object.assign({ security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ], url: '/api/v2/tables/m25l4qwolx06l7t/records' }, options), { headers: Object.assign({ 'Content-Type': 'application/json' }, options === null || options === void 0 ? void 0 : options.headers) }));
};
exports.accountDelete = accountDelete;
/**
 * Account list
 * List of all rows from Account table and response data fields can be filtered based on query params.
 */
const accountDbTableRowList = (options) => {
    var _a;
    return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client_gen_1.client).get(Object.assign({ security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ], url: '/api/v2/tables/m25l4qwolx06l7t/records' }, options));
};
exports.accountDbTableRowList = accountDbTableRowList;
/**
 * Account update
 * Partial update row in table by providing a key value pair object where key refers to the column alias. You need to only include columns which you want to update.
 */
const accountUpdate = (options) => {
    var _a;
    return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client_gen_1.client).patch(Object.assign(Object.assign({ security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ], url: '/api/v2/tables/m25l4qwolx06l7t/records' }, options), { headers: Object.assign({ 'Content-Type': 'application/json' }, options === null || options === void 0 ? void 0 : options.headers) }));
};
exports.accountUpdate = accountUpdate;
/**
 * Account create
 * Insert a new row in table by providing a key value pair object where key refers to the column alias. All the required fields should be included with payload excluding `autoincrement` and column with default value.
 */
const accountCreate = (options) => {
    var _a;
    return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client_gen_1.client).post(Object.assign(Object.assign({ security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ], url: '/api/v2/tables/m25l4qwolx06l7t/records' }, options), { headers: Object.assign({ 'Content-Type': 'application/json' }, options === null || options === void 0 ? void 0 : options.headers) }));
};
exports.accountCreate = accountCreate;
/**
 * Account read
 * Read a row data by using the **primary key** column value.
 */
const accountRead = (options) => {
    var _a;
    return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client_gen_1.client).get(Object.assign({ security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ], url: '/api/v2/tables/m25l4qwolx06l7t/records/{recordId}' }, options));
};
exports.accountRead = accountRead;
/**
 * Account count
 * Get rows count of a table by applying optional filters.
 */
const accountCount = (options) => {
    var _a;
    return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client_gen_1.client).get(Object.assign({ security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ], url: '/api/v2/tables/m25l4qwolx06l7t/records/count' }, options));
};
exports.accountCount = accountCount;
/**
 * Unlink Records
 * This API endpoint allows you to unlink records from a specific `Link field` and `Record ID`. The request payload is an array of record-ids from the adjacent table for unlinking purposes. Note that,
 * - duplicated record-ids will be ignored.
 * - non-existent record-ids will be ignored.
 */
const accountNestedUnlink = (options) => {
    var _a;
    return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client_gen_1.client).delete(Object.assign(Object.assign({ security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ], url: '/api/v2/tables/m25l4qwolx06l7t/links/{linkFieldId}/records/{recordId}' }, options), { headers: Object.assign({ 'Content-Type': 'application/json' }, options === null || options === void 0 ? void 0 : options.headers) }));
};
exports.accountNestedUnlink = accountNestedUnlink;
/**
 * Link Records list
 * This API endpoint allows you to retrieve list of linked records for a specific `Link field` and `Record ID`. The response is an array of objects containing Primary Key and its corresponding display value.
 */
const accountNestedList = (options) => {
    var _a;
    return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client_gen_1.client).get(Object.assign({ security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ], url: '/api/v2/tables/m25l4qwolx06l7t/links/{linkFieldId}/records/{recordId}' }, options));
};
exports.accountNestedList = accountNestedList;
/**
 * Link Records
 * This API endpoint allows you to link records to a specific `Link field` and `Record ID`. The request payload is an array of record-ids from the adjacent table for linking purposes. Note that any existing links, if present, will be unaffected during this operation.
 */
const accountNestedLink = (options) => {
    var _a;
    return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client_gen_1.client).post(Object.assign(Object.assign({ security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ], url: '/api/v2/tables/m25l4qwolx06l7t/links/{linkFieldId}/records/{recordId}' }, options), { headers: Object.assign({ 'Content-Type': 'application/json' }, options === null || options === void 0 ? void 0 : options.headers) }));
};
exports.accountNestedLink = accountNestedLink;
/**
 * UserRole delete
 * Delete a row by using the **primary key** column value.
 */
const userroleDelete = (options) => {
    var _a;
    return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client_gen_1.client).delete(Object.assign(Object.assign({ security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ], url: '/api/v2/tables/m39gw1ga3s65q1e/records' }, options), { headers: Object.assign({ 'Content-Type': 'application/json' }, options === null || options === void 0 ? void 0 : options.headers) }));
};
exports.userroleDelete = userroleDelete;
/**
 * UserRole list
 * List of all rows from UserRole table and response data fields can be filtered based on query params.
 */
const userroleDbTableRowList = (options) => {
    var _a;
    return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client_gen_1.client).get(Object.assign({ security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ], url: '/api/v2/tables/m39gw1ga3s65q1e/records' }, options));
};
exports.userroleDbTableRowList = userroleDbTableRowList;
/**
 * UserRole update
 * Partial update row in table by providing a key value pair object where key refers to the column alias. You need to only include columns which you want to update.
 */
const userroleUpdate = (options) => {
    var _a;
    return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client_gen_1.client).patch(Object.assign(Object.assign({ security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ], url: '/api/v2/tables/m39gw1ga3s65q1e/records' }, options), { headers: Object.assign({ 'Content-Type': 'application/json' }, options === null || options === void 0 ? void 0 : options.headers) }));
};
exports.userroleUpdate = userroleUpdate;
/**
 * UserRole create
 * Insert a new row in table by providing a key value pair object where key refers to the column alias. All the required fields should be included with payload excluding `autoincrement` and column with default value.
 */
const userroleCreate = (options) => {
    var _a;
    return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client_gen_1.client).post(Object.assign(Object.assign({ security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ], url: '/api/v2/tables/m39gw1ga3s65q1e/records' }, options), { headers: Object.assign({ 'Content-Type': 'application/json' }, options === null || options === void 0 ? void 0 : options.headers) }));
};
exports.userroleCreate = userroleCreate;
/**
 * UserRole read
 * Read a row data by using the **primary key** column value.
 */
const userroleRead = (options) => {
    var _a;
    return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client_gen_1.client).get(Object.assign({ security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ], url: '/api/v2/tables/m39gw1ga3s65q1e/records/{recordId}' }, options));
};
exports.userroleRead = userroleRead;
/**
 * UserRole count
 * Get rows count of a table by applying optional filters.
 */
const userroleCount = (options) => {
    var _a;
    return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client_gen_1.client).get(Object.assign({ security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ], url: '/api/v2/tables/m39gw1ga3s65q1e/records/count' }, options));
};
exports.userroleCount = userroleCount;
/**
 * Unlink Records
 * This API endpoint allows you to unlink records from a specific `Link field` and `Record ID`. The request payload is an array of record-ids from the adjacent table for unlinking purposes. Note that,
 * - duplicated record-ids will be ignored.
 * - non-existent record-ids will be ignored.
 */
const userroleNestedUnlink = (options) => {
    var _a;
    return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client_gen_1.client).delete(Object.assign(Object.assign({ security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ], url: '/api/v2/tables/m39gw1ga3s65q1e/links/{linkFieldId}/records/{recordId}' }, options), { headers: Object.assign({ 'Content-Type': 'application/json' }, options === null || options === void 0 ? void 0 : options.headers) }));
};
exports.userroleNestedUnlink = userroleNestedUnlink;
/**
 * Link Records list
 * This API endpoint allows you to retrieve list of linked records for a specific `Link field` and `Record ID`. The response is an array of objects containing Primary Key and its corresponding display value.
 */
const userroleNestedList = (options) => {
    var _a;
    return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client_gen_1.client).get(Object.assign({ security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ], url: '/api/v2/tables/m39gw1ga3s65q1e/links/{linkFieldId}/records/{recordId}' }, options));
};
exports.userroleNestedList = userroleNestedList;
/**
 * Link Records
 * This API endpoint allows you to link records to a specific `Link field` and `Record ID`. The request payload is an array of record-ids from the adjacent table for linking purposes. Note that any existing links, if present, will be unaffected during this operation.
 */
const userroleNestedLink = (options) => {
    var _a;
    return ((_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : client_gen_1.client).post(Object.assign(Object.assign({ security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ], url: '/api/v2/tables/m39gw1ga3s65q1e/links/{linkFieldId}/records/{recordId}' }, options), { headers: Object.assign({ 'Content-Type': 'application/json' }, options === null || options === void 0 ? void 0 : options.headers) }));
};
exports.userroleNestedLink = userroleNestedLink;
//# sourceMappingURL=sdk.gen.js.map