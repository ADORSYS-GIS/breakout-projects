// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '@hey-api/client-axios';
import type { UserDeleteData, UserDbTableRowListData, UserDbTableRowListResponse, UserUpdateData, UserUpdateError, UserCreateData, UserCreateResponse, UserCreateError, UserReadData, UserReadResponse, UserCountData, UserCountResponse, UserCountError, UserNestedUnlinkData, UserNestedUnlinkError, UserNestedListData, UserNestedListResponse, UserNestedListError, UserNestedLinkData, UserNestedLinkError, UseravatarDeleteData, UseravatarDbTableRowListData, UseravatarDbTableRowListResponse, UseravatarUpdateData, UseravatarUpdateError, UseravatarCreateData, UseravatarCreateResponse, UseravatarCreateError, UseravatarReadData, UseravatarReadResponse, UseravatarCountData, UseravatarCountResponse, UseravatarCountError, UseravatarNestedUnlinkData, UseravatarNestedUnlinkError, UseravatarNestedListData, UseravatarNestedListResponse, UseravatarNestedListError, UseravatarNestedLinkData, UseravatarNestedLinkError, AccountDeleteData, AccountDbTableRowListData, AccountDbTableRowListResponse, AccountUpdateData, AccountUpdateError, AccountCreateData, AccountCreateResponse, AccountCreateError, AccountReadData, AccountReadResponse, AccountCountData, AccountCountResponse, AccountCountError, AccountNestedUnlinkData, AccountNestedUnlinkError, AccountNestedListData, AccountNestedListResponse, AccountNestedListError, AccountNestedLinkData, AccountNestedLinkError, UserroleDeleteData, UserroleDbTableRowListData, UserroleDbTableRowListResponse, UserroleUpdateData, UserroleUpdateError, UserroleCreateData, UserroleCreateResponse, UserroleCreateError, UserroleReadData, UserroleReadResponse, UserroleCountData, UserroleCountResponse, UserroleCountError, UserroleNestedUnlinkData, UserroleNestedUnlinkError, UserroleNestedListData, UserroleNestedListResponse, UserroleNestedListError, UserroleNestedLinkData, UserroleNestedLinkError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

/**
 * User delete
 * Delete a row by using the **primary key** column value.
 */
export const userDelete = <ThrowOnError extends boolean = false>(options?: Options<UserDeleteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/tables/mq90d8odwj9en4c/records',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * User list
 * List of all rows from User table and response data fields can be filtered based on query params.
 */
export const userDbTableRowList = <ThrowOnError extends boolean = false>(options?: Options<UserDbTableRowListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserDbTableRowListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/tables/mq90d8odwj9en4c/records',
        ...options
    });
};

/**
 * User update
 * Partial update row in table by providing a key value pair object where key refers to the column alias. You need to only include columns which you want to update.
 */
export const userUpdate = <ThrowOnError extends boolean = false>(options?: Options<UserUpdateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).patch<unknown, UserUpdateError, ThrowOnError>({
        security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/tables/mq90d8odwj9en4c/records',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * User create
 * Insert a new row in table by providing a key value pair object where key refers to the column alias. All the required fields should be included with payload excluding `autoincrement` and column with default value.
 */
export const userCreate = <ThrowOnError extends boolean = false>(options?: Options<UserCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UserCreateResponse, UserCreateError, ThrowOnError>({
        security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/tables/mq90d8odwj9en4c/records',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * User read
 * Read a row data by using the **primary key** column value.
 */
export const userRead = <ThrowOnError extends boolean = false>(options: Options<UserReadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserReadResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/tables/mq90d8odwj9en4c/records/{recordId}',
        ...options
    });
};

/**
 * User count
 * Get rows count of a table by applying optional filters.
 */
export const userCount = <ThrowOnError extends boolean = false>(options?: Options<UserCountData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserCountResponse, UserCountError, ThrowOnError>({
        security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/tables/mq90d8odwj9en4c/records/count',
        ...options
    });
};

/**
 * Unlink Records
 * This API endpoint allows you to unlink records from a specific `Link field` and `Record ID`. The request payload is an array of record-ids from the adjacent table for unlinking purposes. Note that,
 * - duplicated record-ids will be ignored.
 * - non-existent record-ids will be ignored.
 */
export const userNestedUnlink = <ThrowOnError extends boolean = false>(options: Options<UserNestedUnlinkData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<unknown, UserNestedUnlinkError, ThrowOnError>({
        security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/tables/mq90d8odwj9en4c/links/{linkFieldId}/records/{recordId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Link Records list
 * This API endpoint allows you to retrieve list of linked records for a specific `Link field` and `Record ID`. The response is an array of objects containing Primary Key and its corresponding display value.
 */
export const userNestedList = <ThrowOnError extends boolean = false>(options: Options<UserNestedListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserNestedListResponse, UserNestedListError, ThrowOnError>({
        security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/tables/mq90d8odwj9en4c/links/{linkFieldId}/records/{recordId}',
        ...options
    });
};

/**
 * Link Records
 * This API endpoint allows you to link records to a specific `Link field` and `Record ID`. The request payload is an array of record-ids from the adjacent table for linking purposes. Note that any existing links, if present, will be unaffected during this operation.
 */
export const userNestedLink = <ThrowOnError extends boolean = false>(options: Options<UserNestedLinkData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, UserNestedLinkError, ThrowOnError>({
        security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/tables/mq90d8odwj9en4c/links/{linkFieldId}/records/{recordId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * UserAvatar delete
 * Delete a row by using the **primary key** column value.
 */
export const useravatarDelete = <ThrowOnError extends boolean = false>(options?: Options<UseravatarDeleteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/tables/mk3wnta3zio319q/records',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * UserAvatar list
 * List of all rows from UserAvatar table and response data fields can be filtered based on query params.
 */
export const useravatarDbTableRowList = <ThrowOnError extends boolean = false>(options?: Options<UseravatarDbTableRowListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UseravatarDbTableRowListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/tables/mk3wnta3zio319q/records',
        ...options
    });
};

/**
 * UserAvatar update
 * Partial update row in table by providing a key value pair object where key refers to the column alias. You need to only include columns which you want to update.
 */
export const useravatarUpdate = <ThrowOnError extends boolean = false>(options?: Options<UseravatarUpdateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).patch<unknown, UseravatarUpdateError, ThrowOnError>({
        security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/tables/mk3wnta3zio319q/records',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * UserAvatar create
 * Insert a new row in table by providing a key value pair object where key refers to the column alias. All the required fields should be included with payload excluding `autoincrement` and column with default value.
 */
export const useravatarCreate = <ThrowOnError extends boolean = false>(options?: Options<UseravatarCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UseravatarCreateResponse, UseravatarCreateError, ThrowOnError>({
        security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/tables/mk3wnta3zio319q/records',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * UserAvatar read
 * Read a row data by using the **primary key** column value.
 */
export const useravatarRead = <ThrowOnError extends boolean = false>(options: Options<UseravatarReadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UseravatarReadResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/tables/mk3wnta3zio319q/records/{recordId}',
        ...options
    });
};

/**
 * UserAvatar count
 * Get rows count of a table by applying optional filters.
 */
export const useravatarCount = <ThrowOnError extends boolean = false>(options?: Options<UseravatarCountData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UseravatarCountResponse, UseravatarCountError, ThrowOnError>({
        security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/tables/mk3wnta3zio319q/records/count',
        ...options
    });
};

/**
 * Unlink Records
 * This API endpoint allows you to unlink records from a specific `Link field` and `Record ID`. The request payload is an array of record-ids from the adjacent table for unlinking purposes. Note that,
 * - duplicated record-ids will be ignored.
 * - non-existent record-ids will be ignored.
 */
export const useravatarNestedUnlink = <ThrowOnError extends boolean = false>(options: Options<UseravatarNestedUnlinkData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<unknown, UseravatarNestedUnlinkError, ThrowOnError>({
        security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/tables/mk3wnta3zio319q/links/{linkFieldId}/records/{recordId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Link Records list
 * This API endpoint allows you to retrieve list of linked records for a specific `Link field` and `Record ID`. The response is an array of objects containing Primary Key and its corresponding display value.
 */
export const useravatarNestedList = <ThrowOnError extends boolean = false>(options: Options<UseravatarNestedListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UseravatarNestedListResponse, UseravatarNestedListError, ThrowOnError>({
        security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/tables/mk3wnta3zio319q/links/{linkFieldId}/records/{recordId}',
        ...options
    });
};

/**
 * Link Records
 * This API endpoint allows you to link records to a specific `Link field` and `Record ID`. The request payload is an array of record-ids from the adjacent table for linking purposes. Note that any existing links, if present, will be unaffected during this operation.
 */
export const useravatarNestedLink = <ThrowOnError extends boolean = false>(options: Options<UseravatarNestedLinkData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, UseravatarNestedLinkError, ThrowOnError>({
        security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/tables/mk3wnta3zio319q/links/{linkFieldId}/records/{recordId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Account delete
 * Delete a row by using the **primary key** column value.
 */
export const accountDelete = <ThrowOnError extends boolean = false>(options?: Options<AccountDeleteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/tables/m25l4qwolx06l7t/records',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Account list
 * List of all rows from Account table and response data fields can be filtered based on query params.
 */
export const accountDbTableRowList = <ThrowOnError extends boolean = false>(options?: Options<AccountDbTableRowListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AccountDbTableRowListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/tables/m25l4qwolx06l7t/records',
        ...options
    });
};

/**
 * Account update
 * Partial update row in table by providing a key value pair object where key refers to the column alias. You need to only include columns which you want to update.
 */
export const accountUpdate = <ThrowOnError extends boolean = false>(options?: Options<AccountUpdateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).patch<unknown, AccountUpdateError, ThrowOnError>({
        security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/tables/m25l4qwolx06l7t/records',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Account create
 * Insert a new row in table by providing a key value pair object where key refers to the column alias. All the required fields should be included with payload excluding `autoincrement` and column with default value.
 */
export const accountCreate = <ThrowOnError extends boolean = false>(options?: Options<AccountCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AccountCreateResponse, AccountCreateError, ThrowOnError>({
        security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/tables/m25l4qwolx06l7t/records',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Account read
 * Read a row data by using the **primary key** column value.
 */
export const accountRead = <ThrowOnError extends boolean = false>(options: Options<AccountReadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AccountReadResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/tables/m25l4qwolx06l7t/records/{recordId}',
        ...options
    });
};

/**
 * Account count
 * Get rows count of a table by applying optional filters.
 */
export const accountCount = <ThrowOnError extends boolean = false>(options?: Options<AccountCountData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AccountCountResponse, AccountCountError, ThrowOnError>({
        security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/tables/m25l4qwolx06l7t/records/count',
        ...options
    });
};

/**
 * Unlink Records
 * This API endpoint allows you to unlink records from a specific `Link field` and `Record ID`. The request payload is an array of record-ids from the adjacent table for unlinking purposes. Note that,
 * - duplicated record-ids will be ignored.
 * - non-existent record-ids will be ignored.
 */
export const accountNestedUnlink = <ThrowOnError extends boolean = false>(options: Options<AccountNestedUnlinkData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<unknown, AccountNestedUnlinkError, ThrowOnError>({
        security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/tables/m25l4qwolx06l7t/links/{linkFieldId}/records/{recordId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Link Records list
 * This API endpoint allows you to retrieve list of linked records for a specific `Link field` and `Record ID`. The response is an array of objects containing Primary Key and its corresponding display value.
 */
export const accountNestedList = <ThrowOnError extends boolean = false>(options: Options<AccountNestedListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AccountNestedListResponse, AccountNestedListError, ThrowOnError>({
        security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/tables/m25l4qwolx06l7t/links/{linkFieldId}/records/{recordId}',
        ...options
    });
};

/**
 * Link Records
 * This API endpoint allows you to link records to a specific `Link field` and `Record ID`. The request payload is an array of record-ids from the adjacent table for linking purposes. Note that any existing links, if present, will be unaffected during this operation.
 */
export const accountNestedLink = <ThrowOnError extends boolean = false>(options: Options<AccountNestedLinkData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, AccountNestedLinkError, ThrowOnError>({
        security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/tables/m25l4qwolx06l7t/links/{linkFieldId}/records/{recordId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * UserRole delete
 * Delete a row by using the **primary key** column value.
 */
export const userroleDelete = <ThrowOnError extends boolean = false>(options?: Options<UserroleDeleteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/tables/m39gw1ga3s65q1e/records',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * UserRole list
 * List of all rows from UserRole table and response data fields can be filtered based on query params.
 */
export const userroleDbTableRowList = <ThrowOnError extends boolean = false>(options?: Options<UserroleDbTableRowListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserroleDbTableRowListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/tables/m39gw1ga3s65q1e/records',
        ...options
    });
};

/**
 * UserRole update
 * Partial update row in table by providing a key value pair object where key refers to the column alias. You need to only include columns which you want to update.
 */
export const userroleUpdate = <ThrowOnError extends boolean = false>(options?: Options<UserroleUpdateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).patch<unknown, UserroleUpdateError, ThrowOnError>({
        security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/tables/m39gw1ga3s65q1e/records',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * UserRole create
 * Insert a new row in table by providing a key value pair object where key refers to the column alias. All the required fields should be included with payload excluding `autoincrement` and column with default value.
 */
export const userroleCreate = <ThrowOnError extends boolean = false>(options?: Options<UserroleCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UserroleCreateResponse, UserroleCreateError, ThrowOnError>({
        security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/tables/m39gw1ga3s65q1e/records',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * UserRole read
 * Read a row data by using the **primary key** column value.
 */
export const userroleRead = <ThrowOnError extends boolean = false>(options: Options<UserroleReadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserroleReadResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/tables/m39gw1ga3s65q1e/records/{recordId}',
        ...options
    });
};

/**
 * UserRole count
 * Get rows count of a table by applying optional filters.
 */
export const userroleCount = <ThrowOnError extends boolean = false>(options?: Options<UserroleCountData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserroleCountResponse, UserroleCountError, ThrowOnError>({
        security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/tables/m39gw1ga3s65q1e/records/count',
        ...options
    });
};

/**
 * Unlink Records
 * This API endpoint allows you to unlink records from a specific `Link field` and `Record ID`. The request payload is an array of record-ids from the adjacent table for unlinking purposes. Note that,
 * - duplicated record-ids will be ignored.
 * - non-existent record-ids will be ignored.
 */
export const userroleNestedUnlink = <ThrowOnError extends boolean = false>(options: Options<UserroleNestedUnlinkData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<unknown, UserroleNestedUnlinkError, ThrowOnError>({
        security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/tables/m39gw1ga3s65q1e/links/{linkFieldId}/records/{recordId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Link Records list
 * This API endpoint allows you to retrieve list of linked records for a specific `Link field` and `Record ID`. The response is an array of objects containing Primary Key and its corresponding display value.
 */
export const userroleNestedList = <ThrowOnError extends boolean = false>(options: Options<UserroleNestedListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserroleNestedListResponse, UserroleNestedListError, ThrowOnError>({
        security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/tables/m39gw1ga3s65q1e/links/{linkFieldId}/records/{recordId}',
        ...options
    });
};

/**
 * Link Records
 * This API endpoint allows you to link records to a specific `Link field` and `Record ID`. The request payload is an array of record-ids from the adjacent table for linking purposes. Note that any existing links, if present, will be unaffected during this operation.
 */
export const userroleNestedLink = <ThrowOnError extends boolean = false>(options: Options<UserroleNestedLinkData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, UserroleNestedLinkError, ThrowOnError>({
        security: [
            {
                name: 'xc-token',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/tables/m39gw1ga3s65q1e/links/{linkFieldId}/records/{recordId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};