{"openapi":"3.0.0","info":{"title":"nocodb","version":"2.0"},"servers":[{"url":"http://localhost:8080"},{"url":"{customUrl}","variables":{"customUrl":{"default":"http://localhost:8080","description":"Provide custom nocodb app base url"}}}],"paths":{"/api/v2/tables/mq90d8odwj9en4c/records":{"get":{"summary":"User list","operationId":"user-db-table-row-list","description":"List of all rows from User table and response data fields can be filtered based on query params.","tags":["User"],"parameters":[{"schema":{"type":"string","enum":["vwiot3rio3vfs5o7"]},"description":"Allows you to fetch records that are currently visible within a specific view.\n\nViews:\n* vwiot3rio3vfs5o7 - Default view","name":"viewId","in":"query","required":false},{"schema":{"type":"string"},"in":"query","name":"fields","description":"Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`."},{"schema":{"type":"string"},"in":"query","name":"sort","description":"Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`"},{"schema":{"type":"string"},"in":"query","name":"where","description":"This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"},{"schema":{"type":"number","minimum":1},"in":"query","name":"limit","description":"The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.","example":25},{"schema":{"type":"number","minimum":0,"maximum":1},"in":"query","name":"shuffle","description":"The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.","example":0},{"schema":{"type":"number","minimum":0},"in":"query","name":"offset","description":"The `offset` parameter used for pagination, the value helps to select collection from a certain index.","example":0},{"schema":{"type":"string"},"in":"query","name":"nested[Avatar][where]","description":"This can be used for filtering rows in nested column `Avatar`, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `nested[Avatar][where]=(field1,eq,value)`"},{"schema":{"type":"number","minimum":0},"in":"query","name":"nested[Avatar][offset]","description":"The `offset` parameter used for pagination  of nested `Avatar` rows, the value helps to select collection from a certain index.","example":0},{"schema":{"type":"number","minimum":1},"in":"query","name":"nested[Avatar][limit]","description":"The `limit` parameter used for pagination of nested `Avatar` rows, the response collection size depends on limit value and default value is `25`.","example":"25"},{"schema":{"type":"string"},"in":"query","name":"nested[Avatar][fields]","description":"Array of field names or comma separated filed names to include in the in nested column `Avatar` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[Avatar][fields]=field1,field2`"},{"schema":{"type":"string"},"in":"query","name":"nested[Avatar][sort]","description":"Comma separated field names to sort rows in nested column `Avatar` rows, it will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `nested[Avatar][sort]=field1,-field2`"}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"object","properties":{"list":{"type":"array","items":{"$ref":"#/components/schemas/UserResponse"}},"PageInfo":{"$ref":"#/components/schemas/Paginated"}}}}}}}},"post":{"summary":"User create","description":"Insert a new row in table by providing a key value pair object where key refers to the column alias. All the required fields should be included with payload excluding `autoincrement` and column with default value.","operationId":"user-create","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserResponse"}}}},"400":{"$ref":"#/components/responses/BadRequest"}},"tags":["User"],"requestBody":{"content":{"application/json":{"schema":{"oneOf":[{"$ref":"#/components/schemas/UserRequest"},{"type":"array","items":{"$ref":"#/components/schemas/UserRequest"}}]}}}}},"patch":{"summary":"User update","operationId":"user-update","description":"Partial update row in table by providing a key value pair object where key refers to the column alias. You need to only include columns which you want to update.","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{}}}},"400":{"$ref":"#/components/responses/BadRequest"}},"tags":["User"],"requestBody":{"content":{"application/json":{"schema":{"oneOf":[{"$ref":"#/components/schemas/UserRequest"},{"type":"array","items":{"$ref":"#/components/schemas/UserRequest"}}]}}}}},"delete":{"summary":"User delete","operationId":"user-delete","responses":{"200":{"description":"OK"}},"tags":["User"],"description":"Delete a row by using the **primary key** column value.","requestBody":{"content":{"application/json":{"schema":{"oneOf":[{"$ref":"#/components/schemas/UserIdRequest"},{"type":"array","items":{"$ref":"#/components/schemas/UserIdRequest"}}]}}}}}},"/api/v2/tables/mq90d8odwj9en4c/records/{recordId}":{"get":{"parameters":[{"schema":{"type":"string"},"name":"recordId","in":"path","required":true,"example":1,"description":"Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."},{"schema":{"type":"string"},"in":"query","name":"fields","description":"Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`."}],"summary":"User read","description":"Read a row data by using the **primary key** column value.","operationId":"user-read","tags":["User"],"responses":{"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserResponse"}}}}}}},"/api/v2/tables/mq90d8odwj9en4c/records/count":{"parameters":[{"schema":{"type":"string","enum":["vwiot3rio3vfs5o7"]},"description":"Allows you to fetch records that are currently visible within a specific view.\n\nViews:\n* vwiot3rio3vfs5o7 - Default view","name":"viewId","in":"query","required":false}],"get":{"summary":"User count","operationId":"user-count","description":"Get rows count of a table by applying optional filters.","tags":["User"],"parameters":[{"schema":{"type":"string"},"in":"query","name":"where","description":"This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"object","properties":{"count":{"type":"number"}},"required":["list","pageInfo"]},"examples":{"Example 1":{"value":{"count":3}}}}}},"400":{"$ref":"#/components/responses/BadRequest"}}}},"/api/v2/tables/mq90d8odwj9en4c/links/{linkFieldId}/records/{recordId}":{"parameters":[{"schema":{"type":"string","enum":["c6f09lisz4n73fi","cqoi87y1492iqrt","c0yaqsct3hfvtd3"]},"name":"linkFieldId","in":"path","required":true,"description":"**Links Field Identifier** corresponding to the relation field `Links` established between tables.\n\nLink Columns:\n* c6f09lisz4n73fi - Avatar\n* cqoi87y1492iqrt - Accounts\n* c0yaqsct3hfvtd3 - Role"},{"schema":{"type":"string"},"name":"recordId","in":"path","required":true,"example":1,"description":"Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."}],"get":{"summary":"Link Records list","operationId":"user-nested-list","description":"This API endpoint allows you to retrieve list of linked records for a specific `Link field` and `Record ID`. The response is an array of objects containing Primary Key and its corresponding display value.","tags":["User"],"parameters":[{"schema":{"type":"string"},"in":"query","name":"fields","description":"Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`."},{"schema":{"type":"string"},"in":"query","name":"sort","description":"Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`"},{"schema":{"type":"string"},"in":"query","name":"where","description":"This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"},{"schema":{"type":"number","minimum":1},"in":"query","name":"limit","description":"The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.","example":25},{"schema":{"type":"number","minimum":0},"in":"query","name":"offset","description":"The `offset` parameter used for pagination, the value helps to select collection from a certain index.","example":0}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"object","properties":{"list":{"type":"array","description":"List of data objects","items":{"type":"object"}},"pageInfo":{"$ref":"#/components/schemas/Paginated","description":"Paginated Info"}},"required":["list","pageInfo"]}}}},"400":{"$ref":"#/components/responses/BadRequest"}}},"post":{"summary":"Link Records","operationId":"user-nested-link","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{},"examples":{"Example 1":{"value":true}}}}},"400":{"$ref":"#/components/responses/BadRequest"}},"tags":["User"],"requestBody":{"content":{"application/json":{"schema":{"oneOf":[{"type":"object"},{"type":"array","items":{"type":"object"}}]},"examples":{"Example 1":{"value":[{"Id":4},{"Id":5}]},"Example 2":{"value":{"Id":4}}}}}},"description":"This API endpoint allows you to link records to a specific `Link field` and `Record ID`. The request payload is an array of record-ids from the adjacent table for linking purposes. Note that any existing links, if present, will be unaffected during this operation.","parameters":[{"schema":{"type":"string"},"name":"recordId","in":"path","required":true,"example":1,"description":"Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."}]},"delete":{"summary":"Unlink Records","operationId":"user-nested-unlink","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{},"examples":{"Example 1":{"value":true}}}}},"400":{"$ref":"#/components/responses/BadRequest"}},"tags":["User"],"requestBody":{"content":{"application/json":{"schema":{"oneOf":[{"type":"array","items":{"type":"object"}}]},"examples":{"Example 1":{"value":[{"Id":1},{"Id":2}]}}}}},"description":"This API endpoint allows you to unlink records from a specific `Link field` and `Record ID`. The request payload is an array of record-ids from the adjacent table for unlinking purposes. Note that, \n- duplicated record-ids will be ignored.\n- non-existent record-ids will be ignored.","parameters":[{"schema":{"type":"string"},"name":"recordId","in":"path","required":true,"example":1,"description":"Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."}]}},"/api/v2/tables/mk3wnta3zio319q/records":{"get":{"summary":"UserAvatar list","operationId":"useravatar-db-table-row-list","description":"List of all rows from UserAvatar table and response data fields can be filtered based on query params.","tags":["UserAvatar"],"parameters":[{"schema":{"type":"string","enum":["vwqm21vvg20f0ckt"]},"description":"Allows you to fetch records that are currently visible within a specific view.\n\nViews:\n* vwqm21vvg20f0ckt - Default view","name":"viewId","in":"query","required":false},{"schema":{"type":"string"},"in":"query","name":"fields","description":"Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`."},{"schema":{"type":"string"},"in":"query","name":"sort","description":"Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`"},{"schema":{"type":"string"},"in":"query","name":"where","description":"This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"},{"schema":{"type":"number","minimum":1},"in":"query","name":"limit","description":"The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.","example":25},{"schema":{"type":"number","minimum":0,"maximum":1},"in":"query","name":"shuffle","description":"The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.","example":0},{"schema":{"type":"number","minimum":0},"in":"query","name":"offset","description":"The `offset` parameter used for pagination, the value helps to select collection from a certain index.","example":0},{"schema":{"type":"string"},"in":"query","name":"nested[Acounts][where]","description":"This can be used for filtering rows in nested column `Acounts`, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `nested[Acounts][where]=(field1,eq,value)`"},{"schema":{"type":"number","minimum":0},"in":"query","name":"nested[Acounts][offset]","description":"The `offset` parameter used for pagination  of nested `Acounts` rows, the value helps to select collection from a certain index.","example":0},{"schema":{"type":"number","minimum":1},"in":"query","name":"nested[Acounts][limit]","description":"The `limit` parameter used for pagination of nested `Acounts` rows, the response collection size depends on limit value and default value is `25`.","example":"25"},{"schema":{"type":"string"},"in":"query","name":"nested[Acounts][fields]","description":"Array of field names or comma separated filed names to include in the in nested column `Acounts` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[Acounts][fields]=field1,field2`"},{"schema":{"type":"string"},"in":"query","name":"nested[Acounts][sort]","description":"Comma separated field names to sort rows in nested column `Acounts` rows, it will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `nested[Acounts][sort]=field1,-field2`"}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"object","properties":{"list":{"type":"array","items":{"$ref":"#/components/schemas/UserAvatarResponse"}},"PageInfo":{"$ref":"#/components/schemas/Paginated"}}}}}}}},"post":{"summary":"UserAvatar create","description":"Insert a new row in table by providing a key value pair object where key refers to the column alias. All the required fields should be included with payload excluding `autoincrement` and column with default value.","operationId":"useravatar-create","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserAvatarResponse"}}}},"400":{"$ref":"#/components/responses/BadRequest"}},"tags":["UserAvatar"],"requestBody":{"content":{"application/json":{"schema":{"oneOf":[{"$ref":"#/components/schemas/UserAvatarRequest"},{"type":"array","items":{"$ref":"#/components/schemas/UserAvatarRequest"}}]}}}}},"patch":{"summary":"UserAvatar update","operationId":"useravatar-update","description":"Partial update row in table by providing a key value pair object where key refers to the column alias. You need to only include columns which you want to update.","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{}}}},"400":{"$ref":"#/components/responses/BadRequest"}},"tags":["UserAvatar"],"requestBody":{"content":{"application/json":{"schema":{"oneOf":[{"$ref":"#/components/schemas/UserAvatarRequest"},{"type":"array","items":{"$ref":"#/components/schemas/UserAvatarRequest"}}]}}}}},"delete":{"summary":"UserAvatar delete","operationId":"useravatar-delete","responses":{"200":{"description":"OK"}},"tags":["UserAvatar"],"description":"Delete a row by using the **primary key** column value.","requestBody":{"content":{"application/json":{"schema":{"oneOf":[{"$ref":"#/components/schemas/UserAvatarIdRequest"},{"type":"array","items":{"$ref":"#/components/schemas/UserAvatarIdRequest"}}]}}}}}},"/api/v2/tables/mk3wnta3zio319q/records/{recordId}":{"get":{"parameters":[{"schema":{"type":"string"},"name":"recordId","in":"path","required":true,"example":1,"description":"Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."},{"schema":{"type":"string"},"in":"query","name":"fields","description":"Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`."}],"summary":"UserAvatar read","description":"Read a row data by using the **primary key** column value.","operationId":"useravatar-read","tags":["UserAvatar"],"responses":{"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserAvatarResponse"}}}}}}},"/api/v2/tables/mk3wnta3zio319q/records/count":{"parameters":[{"schema":{"type":"string","enum":["vwqm21vvg20f0ckt"]},"description":"Allows you to fetch records that are currently visible within a specific view.\n\nViews:\n* vwqm21vvg20f0ckt - Default view","name":"viewId","in":"query","required":false}],"get":{"summary":"UserAvatar count","operationId":"useravatar-count","description":"Get rows count of a table by applying optional filters.","tags":["UserAvatar"],"parameters":[{"schema":{"type":"string"},"in":"query","name":"where","description":"This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"object","properties":{"count":{"type":"number"}},"required":["list","pageInfo"]},"examples":{"Example 1":{"value":{"count":3}}}}}},"400":{"$ref":"#/components/responses/BadRequest"}}}},"/api/v2/tables/mk3wnta3zio319q/links/{linkFieldId}/records/{recordId}":{"parameters":[{"schema":{"type":"string","enum":["cyd9tqrp3e11rlx"]},"name":"linkFieldId","in":"path","required":true,"description":"**Links Field Identifier** corresponding to the relation field `Links` established between tables.\n\nLink Columns:\n* cyd9tqrp3e11rlx - Acounts"},{"schema":{"type":"string"},"name":"recordId","in":"path","required":true,"example":1,"description":"Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."}],"get":{"summary":"Link Records list","operationId":"useravatar-nested-list","description":"This API endpoint allows you to retrieve list of linked records for a specific `Link field` and `Record ID`. The response is an array of objects containing Primary Key and its corresponding display value.","tags":["UserAvatar"],"parameters":[{"schema":{"type":"string"},"in":"query","name":"fields","description":"Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`."},{"schema":{"type":"string"},"in":"query","name":"sort","description":"Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`"},{"schema":{"type":"string"},"in":"query","name":"where","description":"This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"},{"schema":{"type":"number","minimum":1},"in":"query","name":"limit","description":"The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.","example":25},{"schema":{"type":"number","minimum":0},"in":"query","name":"offset","description":"The `offset` parameter used for pagination, the value helps to select collection from a certain index.","example":0}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"object","properties":{"list":{"type":"array","description":"List of data objects","items":{"type":"object"}},"pageInfo":{"$ref":"#/components/schemas/Paginated","description":"Paginated Info"}},"required":["list","pageInfo"]}}}},"400":{"$ref":"#/components/responses/BadRequest"}}},"post":{"summary":"Link Records","operationId":"useravatar-nested-link","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{},"examples":{"Example 1":{"value":true}}}}},"400":{"$ref":"#/components/responses/BadRequest"}},"tags":["UserAvatar"],"requestBody":{"content":{"application/json":{"schema":{"oneOf":[{"type":"object"},{"type":"array","items":{"type":"object"}}]},"examples":{"Example 1":{"value":[{"Id":4},{"Id":5}]},"Example 2":{"value":{"Id":4}}}}}},"description":"This API endpoint allows you to link records to a specific `Link field` and `Record ID`. The request payload is an array of record-ids from the adjacent table for linking purposes. Note that any existing links, if present, will be unaffected during this operation.","parameters":[{"schema":{"type":"string"},"name":"recordId","in":"path","required":true,"example":1,"description":"Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."}]},"delete":{"summary":"Unlink Records","operationId":"useravatar-nested-unlink","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{},"examples":{"Example 1":{"value":true}}}}},"400":{"$ref":"#/components/responses/BadRequest"}},"tags":["UserAvatar"],"requestBody":{"content":{"application/json":{"schema":{"oneOf":[{"type":"array","items":{"type":"object"}}]},"examples":{"Example 1":{"value":[{"Id":1},{"Id":2}]}}}}},"description":"This API endpoint allows you to unlink records from a specific `Link field` and `Record ID`. The request payload is an array of record-ids from the adjacent table for unlinking purposes. Note that, \n- duplicated record-ids will be ignored.\n- non-existent record-ids will be ignored.","parameters":[{"schema":{"type":"string"},"name":"recordId","in":"path","required":true,"example":1,"description":"Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."}]}},"/api/v2/tables/m25l4qwolx06l7t/records":{"get":{"summary":"Account list","operationId":"account-db-table-row-list","description":"List of all rows from Account table and response data fields can be filtered based on query params.","tags":["Account"],"parameters":[{"schema":{"type":"string","enum":["vwrmwcjo21rn99wl"]},"description":"Allows you to fetch records that are currently visible within a specific view.\n\nViews:\n* vwrmwcjo21rn99wl - Default view","name":"viewId","in":"query","required":false},{"schema":{"type":"string"},"in":"query","name":"fields","description":"Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`."},{"schema":{"type":"string"},"in":"query","name":"sort","description":"Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`"},{"schema":{"type":"string"},"in":"query","name":"where","description":"This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"},{"schema":{"type":"number","minimum":1},"in":"query","name":"limit","description":"The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.","example":25},{"schema":{"type":"number","minimum":0,"maximum":1},"in":"query","name":"shuffle","description":"The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.","example":0},{"schema":{"type":"number","minimum":0},"in":"query","name":"offset","description":"The `offset` parameter used for pagination, the value helps to select collection from a certain index.","example":0},{"schema":{"type":"string"},"in":"query","name":"nested[User][fields]","description":"Array of field names or comma separated filed names to include in the in nested column `User` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[User][fields]=field1,field2`"}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"object","properties":{"list":{"type":"array","items":{"$ref":"#/components/schemas/AccountResponse"}},"PageInfo":{"$ref":"#/components/schemas/Paginated"}}}}}}}},"post":{"summary":"Account create","description":"Insert a new row in table by providing a key value pair object where key refers to the column alias. All the required fields should be included with payload excluding `autoincrement` and column with default value.","operationId":"account-create","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/AccountResponse"}}}},"400":{"$ref":"#/components/responses/BadRequest"}},"tags":["Account"],"requestBody":{"content":{"application/json":{"schema":{"oneOf":[{"$ref":"#/components/schemas/AccountRequest"},{"type":"array","items":{"$ref":"#/components/schemas/AccountRequest"}}]}}}}},"patch":{"summary":"Account update","operationId":"account-update","description":"Partial update row in table by providing a key value pair object where key refers to the column alias. You need to only include columns which you want to update.","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{}}}},"400":{"$ref":"#/components/responses/BadRequest"}},"tags":["Account"],"requestBody":{"content":{"application/json":{"schema":{"oneOf":[{"$ref":"#/components/schemas/AccountRequest"},{"type":"array","items":{"$ref":"#/components/schemas/AccountRequest"}}]}}}}},"delete":{"summary":"Account delete","operationId":"account-delete","responses":{"200":{"description":"OK"}},"tags":["Account"],"description":"Delete a row by using the **primary key** column value.","requestBody":{"content":{"application/json":{"schema":{"oneOf":[{"$ref":"#/components/schemas/AccountIdRequest"},{"type":"array","items":{"$ref":"#/components/schemas/AccountIdRequest"}}]}}}}}},"/api/v2/tables/m25l4qwolx06l7t/records/{recordId}":{"get":{"parameters":[{"schema":{"type":"string"},"name":"recordId","in":"path","required":true,"example":1,"description":"Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."},{"schema":{"type":"string"},"in":"query","name":"fields","description":"Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`."}],"summary":"Account read","description":"Read a row data by using the **primary key** column value.","operationId":"account-read","tags":["Account"],"responses":{"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/AccountResponse"}}}}}}},"/api/v2/tables/m25l4qwolx06l7t/records/count":{"parameters":[{"schema":{"type":"string","enum":["vwrmwcjo21rn99wl"]},"description":"Allows you to fetch records that are currently visible within a specific view.\n\nViews:\n* vwrmwcjo21rn99wl - Default view","name":"viewId","in":"query","required":false}],"get":{"summary":"Account count","operationId":"account-count","description":"Get rows count of a table by applying optional filters.","tags":["Account"],"parameters":[{"schema":{"type":"string"},"in":"query","name":"where","description":"This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"object","properties":{"count":{"type":"number"}},"required":["list","pageInfo"]},"examples":{"Example 1":{"value":{"count":3}}}}}},"400":{"$ref":"#/components/responses/BadRequest"}}}},"/api/v2/tables/m25l4qwolx06l7t/links/{linkFieldId}/records/{recordId}":{"parameters":[{"schema":{"type":"string","enum":["c2iv479k4raq0hz"]},"name":"linkFieldId","in":"path","required":true,"description":"**Links Field Identifier** corresponding to the relation field `Links` established between tables.\n\nLink Columns:\n* c2iv479k4raq0hz - User"},{"schema":{"type":"string"},"name":"recordId","in":"path","required":true,"example":1,"description":"Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."}],"get":{"summary":"Link Records list","operationId":"account-nested-list","description":"This API endpoint allows you to retrieve list of linked records for a specific `Link field` and `Record ID`. The response is an array of objects containing Primary Key and its corresponding display value.","tags":["Account"],"parameters":[{"schema":{"type":"string"},"in":"query","name":"fields","description":"Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`."},{"schema":{"type":"string"},"in":"query","name":"sort","description":"Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`"},{"schema":{"type":"string"},"in":"query","name":"where","description":"This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"},{"schema":{"type":"number","minimum":1},"in":"query","name":"limit","description":"The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.","example":25},{"schema":{"type":"number","minimum":0},"in":"query","name":"offset","description":"The `offset` parameter used for pagination, the value helps to select collection from a certain index.","example":0}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"object","properties":{"list":{"type":"array","description":"List of data objects","items":{"type":"object"}},"pageInfo":{"$ref":"#/components/schemas/Paginated","description":"Paginated Info"}},"required":["list","pageInfo"]}}}},"400":{"$ref":"#/components/responses/BadRequest"}}},"post":{"summary":"Link Records","operationId":"account-nested-link","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{},"examples":{"Example 1":{"value":true}}}}},"400":{"$ref":"#/components/responses/BadRequest"}},"tags":["Account"],"requestBody":{"content":{"application/json":{"schema":{"oneOf":[{"type":"object"},{"type":"array","items":{"type":"object"}}]},"examples":{"Example 1":{"value":[{"Id":4},{"Id":5}]},"Example 2":{"value":{"Id":4}}}}}},"description":"This API endpoint allows you to link records to a specific `Link field` and `Record ID`. The request payload is an array of record-ids from the adjacent table for linking purposes. Note that any existing links, if present, will be unaffected during this operation.","parameters":[{"schema":{"type":"string"},"name":"recordId","in":"path","required":true,"example":1,"description":"Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."}]},"delete":{"summary":"Unlink Records","operationId":"account-nested-unlink","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{},"examples":{"Example 1":{"value":true}}}}},"400":{"$ref":"#/components/responses/BadRequest"}},"tags":["Account"],"requestBody":{"content":{"application/json":{"schema":{"oneOf":[{"type":"array","items":{"type":"object"}}]},"examples":{"Example 1":{"value":[{"Id":1},{"Id":2}]}}}}},"description":"This API endpoint allows you to unlink records from a specific `Link field` and `Record ID`. The request payload is an array of record-ids from the adjacent table for unlinking purposes. Note that, \n- duplicated record-ids will be ignored.\n- non-existent record-ids will be ignored.","parameters":[{"schema":{"type":"string"},"name":"recordId","in":"path","required":true,"example":1,"description":"Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."}]}},"/api/v2/tables/m39gw1ga3s65q1e/records":{"get":{"summary":"UserRole list","operationId":"userrole-db-table-row-list","description":"List of all rows from UserRole table and response data fields can be filtered based on query params.","tags":["UserRole"],"parameters":[{"schema":{"type":"string","enum":["vwqzosct9f9ls7wk"]},"description":"Allows you to fetch records that are currently visible within a specific view.\n\nViews:\n* vwqzosct9f9ls7wk - Default view","name":"viewId","in":"query","required":false},{"schema":{"type":"string"},"in":"query","name":"fields","description":"Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`."},{"schema":{"type":"string"},"in":"query","name":"sort","description":"Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`"},{"schema":{"type":"string"},"in":"query","name":"where","description":"This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"},{"schema":{"type":"number","minimum":1},"in":"query","name":"limit","description":"The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.","example":25},{"schema":{"type":"number","minimum":0,"maximum":1},"in":"query","name":"shuffle","description":"The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.","example":0},{"schema":{"type":"number","minimum":0},"in":"query","name":"offset","description":"The `offset` parameter used for pagination, the value helps to select collection from a certain index.","example":0}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"object","properties":{"list":{"type":"array","items":{"$ref":"#/components/schemas/UserRoleResponse"}},"PageInfo":{"$ref":"#/components/schemas/Paginated"}}}}}}}},"post":{"summary":"UserRole create","description":"Insert a new row in table by providing a key value pair object where key refers to the column alias. All the required fields should be included with payload excluding `autoincrement` and column with default value.","operationId":"userrole-create","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserRoleResponse"}}}},"400":{"$ref":"#/components/responses/BadRequest"}},"tags":["UserRole"],"requestBody":{"content":{"application/json":{"schema":{"oneOf":[{"$ref":"#/components/schemas/UserRoleRequest"},{"type":"array","items":{"$ref":"#/components/schemas/UserRoleRequest"}}]}}}}},"patch":{"summary":"UserRole update","operationId":"userrole-update","description":"Partial update row in table by providing a key value pair object where key refers to the column alias. You need to only include columns which you want to update.","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{}}}},"400":{"$ref":"#/components/responses/BadRequest"}},"tags":["UserRole"],"requestBody":{"content":{"application/json":{"schema":{"oneOf":[{"$ref":"#/components/schemas/UserRoleRequest"},{"type":"array","items":{"$ref":"#/components/schemas/UserRoleRequest"}}]}}}}},"delete":{"summary":"UserRole delete","operationId":"userrole-delete","responses":{"200":{"description":"OK"}},"tags":["UserRole"],"description":"Delete a row by using the **primary key** column value.","requestBody":{"content":{"application/json":{"schema":{"oneOf":[{"$ref":"#/components/schemas/UserRoleIdRequest"},{"type":"array","items":{"$ref":"#/components/schemas/UserRoleIdRequest"}}]}}}}}},"/api/v2/tables/m39gw1ga3s65q1e/records/{recordId}":{"get":{"parameters":[{"schema":{"type":"string"},"name":"recordId","in":"path","required":true,"example":1,"description":"Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."},{"schema":{"type":"string"},"in":"query","name":"fields","description":"Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`."}],"summary":"UserRole read","description":"Read a row data by using the **primary key** column value.","operationId":"userrole-read","tags":["UserRole"],"responses":{"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserRoleResponse"}}}}}}},"/api/v2/tables/m39gw1ga3s65q1e/records/count":{"parameters":[{"schema":{"type":"string","enum":["vwqzosct9f9ls7wk"]},"description":"Allows you to fetch records that are currently visible within a specific view.\n\nViews:\n* vwqzosct9f9ls7wk - Default view","name":"viewId","in":"query","required":false}],"get":{"summary":"UserRole count","operationId":"userrole-count","description":"Get rows count of a table by applying optional filters.","tags":["UserRole"],"parameters":[{"schema":{"type":"string"},"in":"query","name":"where","description":"This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"object","properties":{"count":{"type":"number"}},"required":["list","pageInfo"]},"examples":{"Example 1":{"value":{"count":3}}}}}},"400":{"$ref":"#/components/responses/BadRequest"}}}},"/api/v2/tables/m39gw1ga3s65q1e/links/{linkFieldId}/records/{recordId}":{"parameters":[{"schema":{"type":"string","enum":["cgtq9jq9hmg63k6"]},"name":"linkFieldId","in":"path","required":true,"description":"**Links Field Identifier** corresponding to the relation field `Links` established between tables.\n\nLink Columns:\n* cgtq9jq9hmg63k6 - Users"},{"schema":{"type":"string"},"name":"recordId","in":"path","required":true,"example":1,"description":"Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."}],"get":{"summary":"Link Records list","operationId":"userrole-nested-list","description":"This API endpoint allows you to retrieve list of linked records for a specific `Link field` and `Record ID`. The response is an array of objects containing Primary Key and its corresponding display value.","tags":["UserRole"],"parameters":[{"schema":{"type":"string"},"in":"query","name":"fields","description":"Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`."},{"schema":{"type":"string"},"in":"query","name":"sort","description":"Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`"},{"schema":{"type":"string"},"in":"query","name":"where","description":"This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"},{"schema":{"type":"number","minimum":1},"in":"query","name":"limit","description":"The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.","example":25},{"schema":{"type":"number","minimum":0},"in":"query","name":"offset","description":"The `offset` parameter used for pagination, the value helps to select collection from a certain index.","example":0}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"object","properties":{"list":{"type":"array","description":"List of data objects","items":{"type":"object"}},"pageInfo":{"$ref":"#/components/schemas/Paginated","description":"Paginated Info"}},"required":["list","pageInfo"]}}}},"400":{"$ref":"#/components/responses/BadRequest"}}},"post":{"summary":"Link Records","operationId":"userrole-nested-link","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{},"examples":{"Example 1":{"value":true}}}}},"400":{"$ref":"#/components/responses/BadRequest"}},"tags":["UserRole"],"requestBody":{"content":{"application/json":{"schema":{"oneOf":[{"type":"object"},{"type":"array","items":{"type":"object"}}]},"examples":{"Example 1":{"value":[{"Id":4},{"Id":5}]},"Example 2":{"value":{"Id":4}}}}}},"description":"This API endpoint allows you to link records to a specific `Link field` and `Record ID`. The request payload is an array of record-ids from the adjacent table for linking purposes. Note that any existing links, if present, will be unaffected during this operation.","parameters":[{"schema":{"type":"string"},"name":"recordId","in":"path","required":true,"example":1,"description":"Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."}]},"delete":{"summary":"Unlink Records","operationId":"userrole-nested-unlink","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{},"examples":{"Example 1":{"value":true}}}}},"400":{"$ref":"#/components/responses/BadRequest"}},"tags":["UserRole"],"requestBody":{"content":{"application/json":{"schema":{"oneOf":[{"type":"array","items":{"type":"object"}}]},"examples":{"Example 1":{"value":[{"Id":1},{"Id":2}]}}}}},"description":"This API endpoint allows you to unlink records from a specific `Link field` and `Record ID`. The request payload is an array of record-ids from the adjacent table for unlinking purposes. Note that, \n- duplicated record-ids will be ignored.\n- non-existent record-ids will be ignored.","parameters":[{"schema":{"type":"string"},"name":"recordId","in":"path","required":true,"example":1,"description":"Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."}]}}},"components":{"schemas":{"Paginated":{"title":"Paginated","type":"object","properties":{"pageSize":{"type":"integer"},"totalRows":{"type":"integer"},"isFirstPage":{"type":"boolean"},"isLastPage":{"type":"boolean"},"page":{"type":"number"}}},"Attachment":{"title":"Attachment","type":"object","properties":{"mimetype":{"type":"string"},"size":{"type":"integer"},"title":{"type":"string"},"url":{"type":"string"},"icon":{"type":"string"}}},"Groupby":{"title":"Groupby","type":"object","properties":{"count":{"type":"number","description":"count"},"column_name":{"type":"string","description":"the value of the given column"}}},"UserResponse":{"title":"User Response","type":"object","description":"","x-internal":false,"properties":{"Id":{"type":"integer"},"First Name":{"type":"string"},"LastName":{"type":"string"},"Email":{"type":"string"},"Avatar":{"$ref":"#/components/schemas/UserAvatarRequest"},"Accounts":{"type":"number"},"Role":{"type":"number"},"Birth date":{"type":"string"}}},"UserRequest":{"title":"User Request","type":"object","description":"","x-internal":false,"properties":{"First Name":{"type":"string"},"LastName":{"type":"string"},"Email":{"type":"string"},"Birth date":{"type":"string"}}},"UserIdRequest":{"title":"User Id Request","type":"object","description":"","x-internal":false,"properties":{"Id":{"type":"integer"}}},"_nc_m2m_User_UserRoleResponse":{"title":"_nc_m2m_User_UserRole Response","type":"object","description":"","x-internal":false,"properties":{"UserRole_id":{"type":"integer"},"User_id":{"type":"integer"}}},"_nc_m2m_User_UserRoleRequest":{"title":"_nc_m2m_User_UserRole Request","type":"object","description":"","x-internal":false,"properties":{}},"_nc_m2m_User_UserRoleIdRequest":{"title":"_nc_m2m_User_UserRole Id Request","type":"object","description":"","x-internal":false,"properties":{"UserRole_id":{"type":"integer"},"User_id":{"type":"integer"}}},"UserAvatarResponse":{"title":"UserAvatar Response","type":"object","description":"","x-internal":false,"properties":{"Id":{"type":"integer"},"Url":{"type":"string"},"Acounts_id":{"type":"integer"},"Acounts":{"$ref":"#/components/schemas/UserRequest"}}},"UserAvatarRequest":{"title":"UserAvatar Request","type":"object","description":"","x-internal":false,"properties":{"Url":{"type":"string"}}},"UserAvatarIdRequest":{"title":"UserAvatar Id Request","type":"object","description":"","x-internal":false,"properties":{"Id":{"type":"integer"}}},"AccountResponse":{"title":"Account Response","type":"object","description":"","x-internal":false,"properties":{"Id":{"type":"integer"},"Title":{"type":"string"},"User_id":{"type":"integer"},"User":{"$ref":"#/components/schemas/UserRequest"},"provider":{"type":"string"},"providerAccountId":{"type":"string"}}},"AccountRequest":{"title":"Account Request","type":"object","description":"","x-internal":false,"properties":{"Title":{"type":"string"},"provider":{"type":"string"},"providerAccountId":{"type":"string"}}},"AccountIdRequest":{"title":"Account Id Request","type":"object","description":"","x-internal":false,"properties":{"Id":{"type":"integer"}}},"UserRoleResponse":{"title":"UserRole Response","type":"object","description":"","x-internal":false,"properties":{"Id":{"type":"integer"},"Name":{"type":"string"},"Users":{"type":"number"}}},"UserRoleRequest":{"title":"UserRole Request","type":"object","description":"","x-internal":false,"properties":{"Name":{"type":"string"}}},"UserRoleIdRequest":{"title":"UserRole Id Request","type":"object","description":"","x-internal":false,"properties":{"Id":{"type":"integer"}}}},"securitySchemes":{"xcToken":{"type":"apiKey","in":"header","name":"xc-token","description":"API token"}},"responses":{"BadRequest":{"description":"BadRequest","content":{"application/json":{"schema":{"type":"object","properties":{"msg":{"type":"string","x-stoplight":{"id":"p9mk4oi0hbihm"},"example":"BadRequest [Error]: <ERROR MESSAGE>"}},"required":["msg"]},"examples":{"Example 1":{"value":{"msg":"BadRequest [Error]: <ERROR MESSAGE>"}}}}},"headers":{}}}},"security":[{"xcToken":[]}]}